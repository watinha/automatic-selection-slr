Enabling multitenant software solutions for online business software
Risk management is crucial for business software developers. In order to minimize the risk of choosing the wrong multitenancy implementation pattern for a software project, four case studies were conducted that resulted in four architectural patterns. Two of the patterns were derived from interviews while the other two from literature research. For each pattern, their advantages, their liabilities and possible solutions to mitigate them were determined. To help business software developers to choose the most suitable multitenancy implementation patterns, this work provides an overview of the four implementation patterns. The overview consists of a number of multitenancy specific problems and offers solutions on how the patterns can solve these problems, and it also consists of a comparison of the four implementation patterns by showing their consequences and linking them to possible mitigation solutions.