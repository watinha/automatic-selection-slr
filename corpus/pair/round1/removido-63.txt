Improving Student Performance by Evaluating How Well Students Test  	Their Own Programs
Students need to learn more software testing skills. This paper presents  	an approach to teaching software testing in a way that will encourage  	students to practice testing skills in many classes and give them  	concrete feedback on their testing performance, without requiring  	a new course, any new faculty resources, or a significant number  	of lecture hours in each course where testing will be practiced.  	The strategy is to give students basic exposure to test-driven development,  	and then provide an automated tool that will assess student submissions  	on-demand and provide feedback for improvement. This approach has  	been demonstrated in an undergraduate programming languages course  	using a prototype tool. The results have been positive, with students  	expressing appreciation for the practical benefits of test-driven  	development on programming assignments. Experimental analysis of  	student programs shows a 28% reduction in defects per thousand lines  	of code.