But, isn't that cheating? [collaborative programming]
Can university computer science students benefit from collaborative
programming? The author discusses his experiences with a class he
taught at the University of Utah which set out to study pair programming
in an educational setting. The class, an Active Server Pages (ASP)
web programming class, consisted of 20 juniors and seniors. The students
were very familiar with programming, but not with the web programming
languages learned and used in the class. Each student was paired
with another student to work with for the entire semester. Tests
were, however, taken individually. They understood that the idea
was not to break the class project into two pieces and integrate
later. The idea was to work together (almost) all the time on one
product. These requirements were stated in the course announcement
and were re-stated at the start of the class. Most skeptically, but
enthusiastically, embarked on making the transition from solo to
collaborative programming. The consensus of the class was very, very
positive about the technique. Making the transition to pair programming
involves breaking down some personal barriers beginning with the
understanding that talking is not cheating. Pair programming has
the potential of changing how programming classes are taught in order
to benefit the students' learning experience.