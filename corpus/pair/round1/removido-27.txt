Pair programming and the mysterious role of the navigator
Computer programming is generally understood to be highly challenging  	and since its inception a wide range of approaches, tools and methodologies  	have been developed to assist in managing its complexity. Relatively  	recently the potential benefits of collaborative software development  	have been formalised in the practice of pair programming. Here we  	attempt to `unpick' the pair programming process through the analysis  	of verbalisations from a number of commercial studies. We focus particularly  	on the roles of the two programmers and what their key characteristics  	and behaviours might be. In particular, we dispute two existing claims:  	(i) that the programmer who is not currently typing in code ("the  	navigator") is constantly reviewing what is typed and highlighting  	any errors (i.e. acting as a reviewer) and (ii) that the navigator  	focuses on a different level of abstraction as a way of ensuring  	coverage at all necessary levels (i.e. acting as a foreman). We provide  	an alternative model for these roles ("the tag team") in which the  	driver and navigator play much more equal roles. We also suggest  	that a key factor in the success of pair programming may be the associated  	increase in talk at an intermediate level of abstraction.