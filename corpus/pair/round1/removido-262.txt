Cognitive aspects of software engineering processes
Software engineering activities are to process a large amount of knowledge
and therefore, the cognitive process is mainly involved. Studying
the cognitive process involved in software engineering can greatly
help us to understand the whole process and to improve software engineering
research. In order to study the cognitive process, we developed an
empirical method that includes dialog-based protocol and self-directed
learning theory. The dialog-based protocol is based on the analysis
of the dialog that occurs between programmers in pair programming.
It is an alternative to the common think-aloud protocol and it may
minimize the Hawthorne and placebo effects. The self-directed learning
theory is based on the constructivist learning theory and the Bloom
taxonomy. It captures the specifics of the programmer's cognitive
activities and provides an encoding scheme used in analyzing the
empirical data. We conducted a case study of expert and intermediate
programmers during incremental software development. Compared to
intermediate programmers, experts discussed more domain concepts
at a greater length before starting to write code. Experts mostly
concentrated on one concept at one time, while intermediate programmers
often discussed several concepts simultaneously. Experts were willing
to reconsider and correct obsolete design decisions, while intermediate
programmers retained all design decisions. Experts had more absorption
activities at higher Bloom levels such as analysis and synthesis,
while intermediate programmers had more absorption activities at
lower Bloom levels such as comprehension and application. Experts
spent more time analyzing the knowledge and generating test cases,
while intermediate programmers spent more time learning the knowledge.
We also conducted a case study on program debugging, and found that
programmers apply the cognitive activities at all six Bloom levels
and move from lower one to upper one in order to make update. Program
debugging is a more complex activity than incremental software development.
A case study on pair programming in software evolution class projects
was also performed. The results of the case study showed that paired
students completed their change request tasks faster and with higher
quality than individuals. They also wrote less lines of code and
used more meaningful variable names.