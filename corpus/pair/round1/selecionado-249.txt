The effects of "pair-pressure" and "pair-learning" on software engineering  	education
Anecdotal evidence from several sources, primarily in industry, indicates  	that two programmers working collaboratively on the same design,  	algorithm, code, or test perform substantially better than the two  	would working alone. In this technique, often called "pair programming"  	or "collaborative programming", one person is the "driver" and has  	control of the pencil/mouse/keyboard and is writing the design or  	code. The other person continuously and actively observes the work  	of the driver-watching for defects, thinking of alternatives, looking  	up resources, and considering strategic implications of the work  	at hand. A course in Web programming was taught at the University  	of Utah in Summer Semester 1999. In this course, the students worked  	in pairs, continuously collaborating on all programming assignments.  	Using the technique, the students applied a positive form of "pair-pressure"  	on each other, which proved beneficial to the quality of their work  	products. The students also benefited from "pair-learning", which  	allowed them to learn new languages faster and better than they had  	experienced with solitary learning. "Pair-learning" also reduced  	the workload of the teaching because the students no longer relied  	primarily on them for technical support and advise.