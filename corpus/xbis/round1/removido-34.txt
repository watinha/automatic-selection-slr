Portability of Process-Aware and Service-Oriented Software
Abstract
Modern software systems are becoming increasingly integrated and are required
to operate over organizational boundaries through networks. The development
of such distributed software systems has been shaped by the orthogonal trends
of service-orientation and process-awareness. These trends put an emphasis
on technological neutrality, loose coupling, independence from the execution
platform, and location transparency. Execution platforms supporting these
trends provide context and cross-cutting functionality to applications and are
referred to as engines.
Applications and engines interface via language standards. The engine implements
a standard. If an application is implemented in conformance to this
standard, it can be executed on the engine. A primary motivation for the usage
of standards is the portability of applications. Portability, the ability to move
software among different execution platforms without the necessity for full or partial
reengineering, protects from vendor lock-in and enables application migration
to newer engines.
The arrival of cloud computing has made it easy to provision new and scalable
execution platforms. To enable easy platform changes, existing international
standards for implementing service-oriented and process-aware software name
the portability of standardized artifacts as an important goal. Moreover, they
provide platform-independent serialization formats that enable the portable
implementation of applications. Nevertheless, practice shows that service-oriented
and process-aware applications today are limited with respect to their portability.
The reason for this is that engines rarely implement a complete standard, but
leave out parts or differ in the interpretation of the standard. As a consequence,
even applications that claim to be portable by conforming to a standard might
not be so.
This thesis contributes to the development of portable service-oriented and
process-aware software in two ways: Firstly, it provides evidence for the existence
of portability issues and the insufficiency of standards for guaranteeing software
portability. Secondly, it derives and validates a novel measurement framework
for quantifying portability. We present a methodology for benchmarking the
conformance of engines to a language standard and implement it in a fully
automated benchmarking tool. Several test suites of conformance tests for two
different languages, the Web Services Business Process Execution Language 2.0
and the Business Process Model and Notation 2.0, allow to uncover a variety of
standard conformance issues in existing engines. This provides evidence that the
standard-based portability of applications is a real issue. Based on these results,
this thesis derives a measurement framework for portability. The framework
v
is aligned to the ISO/IEC Systems and software Quality Requirements and
Evaluation method, the recent revision of the renowned ISO/IEC software quality
model and measurement methodology. This quality model separates the software
quality characteristic of portability into the subcharacteristics of installability,
adaptability, and replaceability. Each of these characteristics forms one part of the
measurement framework. This thesis targets each characteristic with a separate
analysis, metrics derivation, evaluation, and validation. We discuss existing
metrics from the body of literature and derive new extensions specifically tailored
to the evaluation of service-oriented and process-aware software. Proposed metrics
are defined formally and validated theoretically using an informal and a formal
validation framework. Furthermore, the computation of the metrics has been
prototypically implemented. This implementation is used to evaluate metrics
performance in experiments based on large scale software libraries obtained from
public open source software repositories.
In summary, this thesis provides evidence that contemporary standards and
their implementations are not sufficient for enabling the portability of processaware
and service-oriented applications. Furthermore, it proposes, validates, and
practically evaluates a framework for measuring portability.