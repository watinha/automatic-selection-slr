From business process models to process-oriented software systems
Several methods for enterprise systems analysis rely on flow-oriented representations of business operations, otherwise known as business process models. The Business Process Modeling Notation {(BPMN)} is a standard for capturing such models. {BPMN} models facilitate communication between domain experts and analysts and provide input to software development projects. Meanwhile, there is an emergence of methods for enterprise software development that rely on detailed process definitions that are executed by process engines. These process definitions refine their counterpart {BPMN} models by introducing data manipulation, application binding, and other implementation details. The de facto standard for defining executable processes is the Business Process Execution Language {(BPEL).} Accordingly, a standards-based method for developing process-oriented systems is to start with {BPMN} models and to translate these models into {BPEL} definitions for subsequent refinement. However, instrumenting this method is challenging because {BPMN} models and {BPEL} definitions are structurally very different. Existing techniques for translating {BPMN} to {BPEL} only work for limited classes of {BPMN} models. This article proposes a translation technique that does not impose structural restrictions on the source {BPMN} model. At the same time, the technique emphasizes the generation of readable (block-structured) {BPEL} code. An empirical evaluation conducted over a large collection of process models shows that the resulting {BPEL} definitions are largely block-structured. Beyond its direct relevance in the context of {BPMN} and {BPEL,} the technique presented in this article addresses issues that arise when translating from graph-oriented to block-structure flow definition languages.