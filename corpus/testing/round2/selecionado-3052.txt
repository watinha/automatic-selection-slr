Supporting Software Verification and Validation with Knowledg
Verification and validation are important parts of
the software development process. The software
verification and validation (V&V) activities ensure that
the artifacts conform to the specifications and that the
final product is what was initially requested from the
customers. However, the accomplishing of V&V
activities is not simple. For many software
development projects, half of the planed schedule is
spent on software verification and validation activities.
Additionally, in most cases the software developers
make use of technologies for which we have not
enough evidence to confirm their suitability, limits,
qualities, costs, and inherent risks.
There is a need to help developers accomplishing
V&V activities. There are two ways to support the
developer. One way is defining what developers have
to do, that is, the sequence of V&V activities to be
executed in the software development. Software
processes have this purpose describing V&V activities,
pre-conditions, sub activities, responsibilities and work
products. So, the first goal is to help in V&V process
definition. However, the definition of what have to be
done does not guarantee that the software developer
knows how to do. The second way is to support the
execution of V&V activities defined in the processes,
associating activities with knowledge necessary to
execute it.
When we consider the software V&V processes,
we should take into account international standards,
like ISO/IEC 12207, and maturity models, like CMMI
(www.sei.cmu.edu/cmmi). Despite the existence of this
standard and CMMI, the definition of the software
processes is an activity requiring experience and it
needs software engineering knowledge. Besides, ISO
12207 and CMMI describe V&V activities and
practices using different denominations and detail
levels, which make hard their combined use for the
software process definition.
When considering the support to the execution of
V&V activities, knowledge and experience can be very
useful. But instead of being based in mere intuition,
software development decision should be based on
factual knowledge. Experimentation is an important
way to produce this knowledge. A body of
experimental knowledge can indicate which are the
available technologies to choose, their strengths and
limitations, and under which conditions such
technologies work best.
However there are some difficulties to support
V&V activities with experimental knowledge.
Regarding V&V knowledge, there are several works,
including experimental studies, exploring the state of
practice of the V&V processes and techniques in
software development organizations [1]. All these
works search a better understanding of V&V activities.
However, they do not define direct ways to support
these activities. So, there is no enough grouped
information about V&V methods and techniques that
could allow software developers to properly decide
which techniques they should use in a given context.
Some examples concerned with experimental
software engineering knowledge can be represented by
CeBASE (http://www.cebase.org), and ESERNET
(http://www.esernet.org) repository, both containing
experimental results about the software engineering
technologies effectiveness in organizational contexts.
Despite the fact that these knowledge bases have
information applicable to V&V activities, such
knowledge is not described in a direct way to provide
practical guidelines of its use and also, the knowledge
is not integrated into the software development
process, making its use workload higher.
Considering these scenarios, this work proposes an
approach that intends to directly integrate V&V
knowledge into a software engineering environment
(SEE). Software processes definition and planning,
and, the choice of the suitable V&V techniques to a
specific software product should be supported by the
knowledge management (KM) of a body of practical
recommendations built through systematic reviews [2]
of experimental studies