Managing technical debt in software architecture
Technical debt (TD) has received significant attention in the past few years. The  concept of TD was initially concerned with internal quality issues in coding, and  currently it has been extended to the whole software lifecycle, such as software  architecture and testing. At the architecture level, architectural technical debt (ATD)  is mainly incurred by architecture decisions that intentionally or unintentionally  compromise system-wide quality attributes, particularly maintainability and  evolvability. Considering the fundamental influence of software architecture on  quality attributes, including maintainability and evolvability, TD at the architecture  level (i.e., ATD) has greater and wider impact on these quality attributes than other  TD types, such as code-level TD. Thus, ATD needs to be systematically managed in  an appropriate manner, in order to improve the health of the software architecture  and optimize the cost of maintenance and evolution of the system in the long term.  Most research on TD focuses on TD at the source code level while TD at the  architecture level and its management remain under-explored. Currently, there is a  lack of an overall process for systematically managing ATD, as well as approaches  for concrete ATD management activities, particularly for ATD identification,  measurement, and documentation.  Before investigating the key problems in ATD management, we first needed to  obtain a comprehensive understanding on the concept of TD and the current state of  research on TD management (TDM). This could help us to build a solid  understanding on ATD and inspire us to come up with appropriate approaches for  ATD management. To this end, we conducted a systematic mapping study on TD  and its management. The main results are summarized as follows. (1) TD is classified  into ten types according to the stages of the software development lifecycle, and code  TD was the most studied TD type. (2) Interest, principal, and risk are the most  frequently-used notions to describe and explain the TD concept. (3) Most studies  argue that TD negatively affects the maintainability of the software system. (4) Eight  TDM activities were identified; among the activities, TD identification, measurement,  and repayment received the most attention, while TD representation/documentation  received the least. (5) Among the 29 tools used for managing TD, only four are  dedicated tools for TDM; most tools only support managing code and design TD,  while few tools support the management of other types of TD, e.g., ATD.  After having gained an understanding on the state of the art on TD research, we  tried to explore how to manage ATD. First we proposed a conceptual model of ATD  based on the understanding on TD, and an ATD item template based on this model;  then we developed an ATD management process that utilizes this conceptual model,  in order to facilitate decision-making and decision-evaluation in a value-oriented  perspective in architecture design. The ATD management process is comprised of six  activities: ATD identification, measurement, prioritization, repayment, monitoring,  and documentation. An industrial example using the proposed approach of ATD management in architecture synthesis and evaluation  shows how ATD can be managed in architecting. The contribution of this work  provides a controllable and predictable balance between the value and cost of  architecture design in the long term.  In our ATD management process, the first step is to identify ATD. Existing ATD  identification approaches are mainly based on source code analysis and thus suffer  from certain shortcomings: (1) they can only identify issues at the system  implementation; (2) they can only be employed after the systems is implemented in  code; and (3) they lack a mechanism to confirm whether the identified ATD is real  ATD or not. To address these issues, we proposed an ATD identification approach  based on architecture decisions and change scenarios. We evaluated the effectiveness  and usability of this approach, through an industrial case study in a large  telecommunications company. The results show that the proposed approach is useful  and easy to use for ATD identification, and it also supports release planning and  ATD interest measurement.  It is difficult to precisely measure ATD, but it makes sense to indicate the amount  of the total ATD in a software system. ATD indicators can show the change direction  of the ATD in sequential versions of the software system. One indicator of ATD, is  the average number of modified components per commit (ANMCC): a higher  ANMCC indicates more ATD in a software system. However, it is difficult and  sometimes impossible to calculate ANMCC, because the data (i.e., the log of commits)  are not always available or accessible. We proposed to use software modularity  metrics, which can be directly calculated based on source code, as a substitute of  ANMCC to indicate ATD. We validated the correlation between ANMCC and  modularity metrics through a holistic multiple case study on thirteen open source  software projects. The results of this study suggested that two modularity metrics,  namely Index of Package Changing Impact (IPCI) and Index of Package Goal Focus  (IPGF), have significant correlation with ANMCC, and therefore can be used as  alternative ATD indicators.  After ATD is identified and measured, the knowledge about ATD needs to be  explicitly documented thereby facilitating the rest of the activities in ATD  management. Existing work on ATD documentation is rather limited and it cannot  address all stakeholders concerns on ATD. We proposed six architecture viewpoints  related to ATD (ATD viewpoints in short). Each viewpoint frames a number of  concerns on ATD. All these concerns were systematically extracted from literature in  the aforementioned systematic mapping study on TD. The six ATD viewpoints  together help to get a comprehensive understanding of ATD in a software system,  thereby providing support for architecture decision-making. To evaluate the  effectiveness of the ATD viewpoints in documenting ATD, we conducted an  industrial case study in the same company where the aforementioned ATD  identification approach was validated. The case study results show that the  documented ATD views can effectively facilitate the documentation of ATD.  The aforementioned approaches for ATD management have their limitations while  they do not cover all the activities in the ATD management process. We explored the  application of knowledge-based approaches in software architecture through a  systematic mapping study, in order to improve the current management of ATD,  which is a type of architectural knowledge. We found that (1) the representations of  ATD and architecture in a formal form and further applying reasoning techniques  based on these formal representations can support ATD identification, measurement,  prioritization, and monitoring, and (2) the sharing and reuse of the knowledge on  ATD and related architectural knowledge can support ATD identification,  documentation, prioritization, repayment, and monitoring.