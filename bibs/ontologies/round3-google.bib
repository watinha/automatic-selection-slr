@article{1662,
 abstract = {Abstract:
Mutation Testing is a fault-based software testing technique that has been widely studied for over three decades. The literature on Mutation Testing has contributed a set of approaches, tools, developments, and empirical results. This paper provides a comprehensive analysis and survey of Mutation Testing. The paper also presents the results of several development trend analyses. These analyses provide evidence that Mutation Testing techniques and tools are reaching a state of maturity and applicability, while the topic of Mutation Testing itself is the subject of increasing interest.},
 duplicado = {false},
 inserir = {false},
 title = {An Analysis and Survey of the Development of Mutation Testing},
 year = {2010}
}

@article{1663,
 abstract = {Abstract
This paper introduces a new paradigm for Mutation Testing, which we call Higher Order Mutation Testing (HOM Testing). Traditional Mutation Testing considers only first order mutants, created by the injection of a single fault. Often these first order mutants denote trivial faults that are easily killed. Higher order mutants are created by the insertion of two or more faults. The paper introduces the concept of a subsuming HOM; one that is harder to kill than the first order mutants from which it is constructed. By definition, subsuming HOMs denote subtle fault combinations. The paper reports the results of an empirical study of HOM Testing using 10 programs, including several non-trivial real-world subjects for which test suites are available.},
 duplicado = {false},
 inserir = {false},
 title = {Higher Order Mutation Testing},
 year = {2009}
}

@article{1670,
 abstract = {The paper investigates the notion of Pareto-Nash equilibrium
as continuation of the works [2-4]. Problems and basic theoretical
results are exposed. Method of intersection of graphs of best
response mappings [3] is applied to solve the dyadic two-criteria
games.},
 duplicado = {false},
 inserir = {false},
 title = {The Set of Pareto-Nash Equilibria in Multicriteria Strategic Games},
 year = {2012}
}

@article{1671,
 abstract = {Abstract
Evolutionary computation has become a popular research field due to its global searching ability. Therefore, it raises a challenge to develop an efficient and robustness evolutionary algorithm to not only reduce the evolution process but also increase the chances to meet the global solution. To this end, this study aims to provide a novel evolutionary algorithm named the partial solutions consideration based self-adaptive evolutionary algorithm (PSC-SEA) to address this issue; the proposed algorithm is applied to adjust the parameters of the neuro-fuzzy networks. More specifically, different from the existing evolution algorithms, the partial solutions consideration (PSC) tends to consider both the specializations and complementary relationships of the partial solutions from the complete solution to prevent converging to suboptimal solution. Moreover, a self-adaptive evolutionary algorithm (SEA) is proposed to dynamically adjust the searching space according to the performance. By doing so, the proposed evolutionary algorithm can consider the influence of partial solutions and provide a suitable searching space to increase the chances to meet the global solution. As shown in the results, the proposed evolutionary algorithm obtains better performance and smoother learning curves than other existing evolutionary algorithms. In other words, the proposed evolutionary algorithm can efficient tune the parameters of the neuro-fuzzy networks to meet the global solution. Base on the results, a framework is proposed to build a benchmark for developing the evolutionary algorithms that can not only consider the influence of partial solutions but also provide a suitable searching space.},
 duplicado = {false},
 inserir = {false},
 title = {The partial solutions consideration based self-adaptive evolutionary algorithm: A learning structure of neuro-fuzzy networks},
 year = {2012}
}

@article{1678,
 abstract = {Abstract
Mutation based testing is used to discover new possible errors
in software applications. This is since in this testing approach,
intentional incorrect lines of codes are injected to check the software
ability to produce results that are different from the correct
or original code. In this paper an automatic technique to generate
valid and mutant test cases is proposed and developed. In
most mutation techniques, one or more values or parameters in
the specification, code, model, etc are intentionally modified and
then test cases are generated to see if injected modifications can
be detected. However, in this paper, test cases are mutated (i.e.
mutants are generated from the test cases) after they are generated
from the GUI model. Mutations are then applied to the
GUI model to test its ability to kill those mutants by rejecting
them. Typical to mutation testing, the goal of this approach is
to discover possible errors or problems in the program that may
not be discovered by other methods. A robust model is expected
to differentiate between a valid and an invalid sequence of events.
An automatic execution and verification technique is also developed
to evaluate the test cases that were rejected by the model
and calculate coverage based on the number of rejected test cases
to the total number of test cases. Results showed that in user
interfaces, and based on the nature of the mutation process implementation,
mutation can find new areas or types of errors that
may not be found using other approaches of testing},
 duplicado = {false},
 inserir = {false},
 title = {Using Test Case Mutation to Evaluate the Model of the User Interface},
 year = {2012}
}

@article{1679,
 abstract = {Abstract
ADL is a formal language to express archetypes, it is
independent of standard or domain. However its specification
is not precise enough in relation to the specialization and
semantic of archetypes, presenting difficulties in
implementation and a few available tools. Archetypes may be
implemented using other languages such as XML or OWL,
increasing integration with Semantic Web tools [3, 4].
Exchanging and data transformation processes can be better
implemented with semantcs oriented models, for example
using OWL [1] which is a language to define and instantiate
Web ontologies defined by W3C. OWL permits to define
significant, detailed, precise and consistent distinctions
among classes, properties and relations defined by the user,
ensuring the consistency of knowledge than using ADL
techniques. In this paper it is presented a process of an
openEHR ADL archetypes representation in OWL ontologies.
This process consists of ADL archetypes conversion in OWL
ontologies and validation of OWL resultant ontologies using
the mutation test.},
 duplicado = {false},
 inserir = {false},
 title = {A process for the representation of openEHR ADL archetypes in OWL ontologies},
 year = {2015}
}

@article{1681,
 abstract = {Abstract:
Semantic Web Services (SWS) introduce a semantic layer to the current web infrastructure, enabling the automated processing of web service tasks. In the past decade, various frameworks have been proposed for designing SWS. However, few of them aimed at testing SWS. Generating test cases for SWS is challenging due to its dynamic nature and abstract views, evaluating the test cases is equally essential in order to ensure the quality of the test suite. In this paper, we propose a mutation based evaluation approach to measuring the quality of test cases for SWS. Furthermore, we develop a tool support to automate the steps in the proposed solution. Finally, the approach is applied to the Amazon E-Commerce Service as a real world case study.},
 duplicado = {false},
 inserir = {false},
 title = {Automated Mutation-Based Test Case Evaluation for Semantic Web Services},
 year = {2014}
}

@article{1683,
 abstract = {Abstract:
The Test-Duo framework is proposed for automating the task of generating functional test cases for execution on an automatic testing platform. With Test-Duo, the tester focuses on the tasks of refining and annotating use cases and preparing test data sets with tool support, leaving the tasks of generating the actual test cases and marshaling their execution to Test-Duo. The generated test cases are subjected to mutation testing, whose results are analyzed by the tester to identify and apply appropriate strategies for systematically and iteratively improving the quality of the generated test cases. The effectiveness of this improvement process is demonstrated with a case study.},
 duplicado = {false},
 inserir = {false},
 title = {Towards Automatic Generation and Continuous Improvement of Functional Test Cases: The Case of the Test-Duo Framework and Mutation Testing},
 year = {2015}
}

@article{1685,
 abstract = {Abstract: Software testing has been defined by various eminent
scholars in the past. A definition by Abran and Moore (2004) defines
testing as an activity performed for evaluating product quality and
for improving it, by identifying defects and problems. Further,
automation in software testing involves use of special software to
control the execution of tests and the comparison of actual outcomes
with predicted outcomes. Test automation can automate some
repetitive but necessary tasks in a formalized testing process already
in place, or add additional testing that would be difficult to perform
manually. The broad areas of testing are code driven testing, GUI
testing and API driven testing.
Automated GUI became prominent because of issues raised with
Manual GUI testing. An Automated GUI Testing tool can playback
all the recorded set of tasks, compare the results of execution with the
expected behavior and report success or failure to the test engineers.
Once the GUI tests are created they can easily be repeated for
multiple numbers of times with different data sets and can be
extended to cover additional features at a later time. Automated GUI
Testing is a more accurate, efficient, reliable and cost effective
replacement to manual testing.
Mutation testing is another method of software testing in which
program or source code is deliberately manipulated, followed by
suite of testing against the mutated code. The mutations introduced to
source code are designed to imitate common programming errors. A
good unit test suite typically detects the program mutations and fails
automatically.This paper makes an attempt to review the extant
literature and explore test case generation techniques based on GUI
and mutation testing. },
 duplicado = {false},
 inserir = {false},
 title = {An Anecdote to Automated Test Case Generation Techniques using GUI and Mutation Testing},
 year = {2014}
}

@article{1686,
 abstract = {Abstract
Currently, testing is the most widely used technique to check the validity of complex
systems. Its application in software is a critical part in the development of systems. However,
there are several difficulties for applying these techniques, such as high economic
and computational cost. One of the main difficulties when applying testing techniques is
to obtain an appropriate test suite. This is especially difficult when the size of the system
under test is large, like HPC clusters or cloud systems.
The main goal of this project is to provide mechanisms that allow to evaluate the suitability
of test suites to check distributed systems, in an inexpensive and efficient way. In
this work, we propose MuTomVo, a framework that integrates mutation testing techniques
with simulation techniques. For modelling and simulating distributed systems, the SIMCAN
simulation platform has been used.
MuTomVo is built on a modular and flexible architecture, where new mutation testing
techniques can be easily included. Thus, it is intended to unify, in one framework, functionalities
of different tools, such as simulators, mutation frameworks and tools for generating
tests.
Moreover, this work presents some experiments for analysing the suitability of different
test suites over different distributed applications. Each one of these applications has been
modelled with SIMCAN, and therefore, these experiments have been carried out by applying
mutation testing techniques on these models.},
 duplicado = {false},
 inserir = {false},
 title = {MuTomVo: Mutation Testing framework for omnet-based simulated enVironments},
 year = {2015}
}

@article{1687,
 abstract = {Abstract

Distributed computing paradigms are increasingly moving towards collections of interoperating Web services. To facilitate this interoperation, dynamic discovery and selection of services is required. Existing distributed solutions for the dynamic discovery of services primarily focus on the deployment of directory, broker and matchmaking intermediaries, requiring third party participation and additional infrastructure costs.

The selection of Web services by autonomous actors has become a well-developed area of research. Service-oriented architectures can now provide for complex interactions described by semantically rich process models, thereby enabling consumption by autonomous agents. With distributed agent-based architectures becoming common, academics are increasingly looking towards norm-based approaches to offer flexible control of interacting agents.

Current semantically aware service selection methods rely on matching inputs and outputs provided by services profile models. This approach typically fails to allow actors to differentiate between services where the profile models may match, but the process models differ.

In this research, the question is asked: How can an actor with a set of known normative beliefs use these beliefs to aid service selection where IOPE matching typically falls short?

The following have been created: a model, a language and a module for the norm-based scoring of process denitions. In doing so it is shown that social norms can be used by actors to reason over the potential cost of any interaction and that this metric can provide useful context when selecting partners where the services' basic inputs and outputs may match, but process model specifications may not.},
 duplicado = {false},
 inserir = {false},
 title = {Norm based service selection},
 year = {2017}
}

@article{1691,
 abstract = {[en] Ontologies are an essential component of semantic knowledge bases and applications, and nowadays they are used in a plethora of domains. Despite the maturity of ontology languages, support tools and engineering techniques, the testing and validation of ontologies is a field which still lacks consolidated approaches and tools. This paper attempts at partly bridging that gap, taking a first step towards the extension of mutation testing techniques to ontologies expressed in a widely-used format. Mutation testing techniques, revisited in the light of the peculiar features of the ontology language and structure, can help in the engineering and refinement of ontologies and software based on them.},
 duplicado = {false},
 inserir = {false},
 title = {Mutating OWLs: semantic mutation testing for ontologies},
 year = {2016}
}

@article{1693,
 abstract = {Abstract
One way of evaluating the robustness of a web service is to test it against invalid inputs. We introduce a model-based mutation technique which automatically generates faulty test inputs. From the specification of a Web service, a test model is designed using Uppaal Timed Automata and the conformance between the model and the implementation is validated via online model-based testing with the UppaalTron tool. A set of mutation operators is applied to the test model in order to generate mutant test models. We validate all generated mutants via verification rules and select those that are executable and introduce proper mutations. We employ bisimulation as a tool for detecting and eliminating equivalent mutants, that is those mutants which have identical input-output behavior with the original test model. The resulting mutants are used for online test generation against the service implementation in order to check whether the latter allows for unspecified behavior. We discuss tool support and present an experiment of applying our method for a case study of a blog web service with real-life properties. The experiment shows that the proposed approach of mutating the specifications is effective in detecting errors both in the system functionality and in the test model.},
 duplicado = {false},
 inserir = {false},
 title = {Testing Web Services with Model-Based Mutation},
 year = {2016}
}

@article{1694,
 abstract = {Abstract- Mutation testing does not take a path-based approach. Instead, it takes the program and creates many mutants
of it, by making simple changes to the program. The goal of testing is to make sure that during the course of testing; each
mutant produces an output different from the output of the original program. We have designed a Tool to work Mutation
Testing. The mutation testing is performed in terms of some substitutions in terms of operators. In this proposed work we
have considered java as the base language to test the code. As the language is object oriented language. In this proposed
work we have worked with two major types of operators. One is Class operators and other is Class Operators. },
 duplicado = {false},
 inserir = {false},
 title = {Automation of Operator Oriented Code Coverage using Mutation Testing},
 year = {2012}
}

@article{1703,
 abstract = {Abstract: In order to develop a Supercomputing Cloud Platform (SCP) prototype system using Service-Oriented Architecture (SOA) and Petri nets, we researched some technologies for Web service composition. Specifically, in this paper, we propose a reliability calculation method for Web service compositions, which uses Fuzzy Reasoning Colored Petri Net (FRCPN) to verify the Web service compositions. We put forward a definition of semantic threshold similarity for Web services and a formal definition of FRCPN. We analyzed five kinds of production rules in FRCPN, and applied our method to the SCP prototype. We obtained the reliability value of the end Web service as an indicator of the overall reliability of the FRCPN. The method can test the activity of FRCPN. Experimental results show that the reliability of the Web service composition has a correlation with the number of Web services and the range of reliability transition values.},
 duplicado = {false},
 inserir = {false},
 title = {A Reliability Calculation Method for Web Service Composition Using Fuzzy Reasoning Colored Petri Nets and Its Application on Supercomputing Cloud Platform},
 year = {2016}
}

@article{1704,
 abstract = {Abstract
Web services are important for integrating distributed heterogeneous applications. Web services datatype specifications inside a WSDL interface are difficult to be understood by service requestors and this fact hinders the understandability of web services. A reason for this problem is that web services depend on XML schema-based datatypes and these datatypes are not expressive enough to map many of the web services provider side datatypes written in high level programming languages such as Java and C#. This research investigates the previous problem by analysing the datatype specifications inside WSDLs generated when developing web services by different techniques. Based on this analysis, the paper proposes an approach to detect vague, custom, and similar datatype specifications produced by each of the investigated web services development techniques. When service providers detect such specifications, they can then annotate these specifications to reach for more understandable WSDL interfaces and hence more understandable web services. To demonstrate the usefulness of the proposed approach, a proof of concept tool has been built and this tool proved to be efficient in detecting vague, custom and similar datatype specifications serialised by different web services development techniques.},
 duplicado = {false},
 inserir = {false},
 title = {An approach to detect web services vague datatype specifications to enhance understandability},
 year = {2016}
}

@article{1705,
 abstract = {Supercomputing Cloud Platform (SCP) provides a simple online Web way for computer aided engineering (CAE) simulation on supercomputer Tianhe No.1. We develop SCP prototype by using service-oriented architecture (SOA). Fuzzy colored Petri nets (FCPN) is selected as the automatic combination technology for the Ontology Web Language for Services (OWL-S) in our SCP. To build the dependency relation graphs among Web services in our SCP, we put forward some definitions of semantic threshold similarity for Web services. Based on these definitions, we propose a generation algorithm to build the FCPN dependency relation graph based on semantic similarity of Web services, and analyze an example about this algorithm. Also, we design an algorithm to simplify the FCPN dependency relation graph for fast responding the user's requirements. The research works of this paper (SCP prototype) have been applied in real world, and we show the engineering design and application at the end. We will further research the service verification, transaction model and exception recovery mechanism in the future.},
 duplicado = {false},
 inserir = {false},
 title = {Automatic Combination Technology of Fuzzy CPN for OWL-S Web Services in Supercomputing Cloud Platform},
 year = {2017}
}

@article{1720,
 abstract = {Abstract
Reuse is an important mechanism to increase productivity
and to reduce time and costs during software development.
Although source code is the most commonly reusable
asset, other types of assets can also be reused, such as requirements,
business processes, analysis and design models,
etc. In this context, it is important that the knowledge
about reusable assets and its management are available to
potential stakeholders. This work presents the development
of an ontology of reusable assets specification and management,
named ONTO-ResAsset. This ontology is evaluated
under two points-of-view: domain experts and non-experts.},
 duplicado = {false},
 inserir = {false},
 title = {ONTO-ResAsset Development: An Ontology for Reusable Assets Specification and Management},
 year = {2014}
}

