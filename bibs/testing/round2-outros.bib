@article{1953,
 abstract = {Debugging is an indispensable yet frustrating activity in software development and maintenance. Thus, numerous techniques have been proposed to aid this task. Despite the demonstrated effectiveness and future potential of these techniques, many of them have the unrealistic single-fault failure assumption. To alleviate this problem, we propose a technique that can be used to distinguish failing tests that executed a single fault from those that executed multiple faults in this paper. The technique suitably combines information from (i) a set of fault localization ranked lists, each produced for a certain failing test and (ii) the distance between a failing test and the passing test that most resembles it to achieve this goal. An experiment on 5 real-life medium-sized programs with 18, 920 multiple-fault versions, which are shipped with number of faults ranging from 2 to 8, has been conducted to evaluate the technique. The results indicate that the performance of the technique in terms of evaluation measures precision, recall, and F-measure is promising. In addition, for the identified failing tests that executed a single fault, the technique can also properly cluster them.},
 duplicado = {false},
 inserir = {false},
 title = {Does the failing test execute a single or multiple faults?: an approach to classifying failing tests},
 year = {2015}
}

@article{1954,
 abstract = {Although white-box regression test prioritization has been well-studied, the more recently introduced black-box prioritization approaches have neither been compared against each other nor against more well-established white-box techniques. We present a comprehensive experimental comparison of several test prioritization techniques, including well-established white-box strategies and more recently introduced black-box approaches. We found that Combinatorial Interaction Testing and diversity-based techniques (Input Model Diversity and Input Test Set Diameter) perform best among the black-box approaches. Perhaps surprisingly, we found little difference between black-box and white-box performance (at most 4% fault detection rate difference). We also found the overlap between black- and white-box faults to be high: the first 10% of the prioritized test suites already agree on at least 60% of the faults found. These are positive findings for practicing regression testers who may not have source code available, thereby making white-box techniques inapplicable. We also found evidence that both black-box and white-box prioritization remain robust over multiple system releases.},
 duplicado = {false},
 inserir = {false},
 title = {Comparing white-box and black-box test prioritization},
 year = {2016}
}

@article{1955,
 abstract = {Abstract:
Systematic defect management based on bug-tracking systems such as Bugzilla is well established and has been successfully used in many software organizations. Defect management weights the failures observed during test execution according to their severity and forms the basis for effective defect taxonomies. In practice, most defect taxonomies are used only for the a posteriori allocation of testing resources to prioritize failures for debugging. Thus, these taxonomies' full potential to control and improve all the steps of testing has remained unexploited. This is especially the case for testing a system's user requirements. System-level defect taxonomies can improve the design of requirements-based tests, the tracing of defects to requirements, the quality assessment of requirements, and the control of the relevant defect management. So, we developed requirements-based testing with defect taxonomies (RTDT). This approach is aligned with the standard test process and uses defect taxonomies to support all phases of testing requirements. To illustrate this approach and its benefits, we use an example project (which we call Project A) from a public health insurance institution.},
 duplicado = {false},
 inserir = {false},
 title = {Using Defect Taxonomies for Testing Requirements},
 year = {2014}
}

@article{1956,
 abstract = {Abstract:
Model-based testing is of high practical relevance and many model-based testing approaches have been developed during the last years. But the key question under which conditions model-based testing pays off and a related decision support procedure for its application has not been sufficiently addressed. In this paper we develop a generic decision support procedure whether to apply model-based testing in a project or not. The decision support procedure compares estimated costs and benefits of model-based testing throughout all phases of the test process and is derived on the basis of a case study performed at the European Space Agency.},
 duplicado = {false},
 inserir = {false},
 title = {Estimating the Cost and Benefit of Model-Based Testing: A Decision Support Procedure for the Application of Model-Based Testing in Industry},
 year = {2015}
}

@article{1957,
 abstract = {Abstract
In software system development, testing can take considerable time and resources, and there are numerous examples in the literature of how to improve the testing process. In particular, methods for selection and prioritization of test cases can play a critical role in efficient use of testing resources. This paper focuses on the problem of selection and ordering of integration-level test cases. Integration testing is performed to evaluate the correctness of several units in composition. Further, for reasons of both effectiveness and safety, many embedded systems are still tested manually. To this end, we propose a process, supported by an online decision support system, for ordering and selection of test cases based on the test result of previously executed test cases. To analyze the economic efficiency of such a system, a customized return on investment (ROI) metric tailored for system integration testing is introduced. Using data collected from the development process of a large-scale safety-critical embedded system, we perform Monte Carlo simulations to evaluate the expected ROI of three variants of the proposed new process. The results show that our proposed decision support system is beneficial in terms of ROI at system integration testing and thus qualifies as an important element in improving the integration testing process.},
 duplicado = {false},
 inserir = {false},
 title = {Cost-Benefit Analysis of Using Dependency Knowledge at Integration Testing},
 year = {2016}
}

@article{1958,
 abstract = {Abstract:
The measurement of external software attributes and the analysis of how those attributes have evolved through the software's releases are challenging activities. This is particularly evident when we discuss the maintainability of Object-Oriented (OO) systems which, due to their specific characteristics, hide information that cannot be gathered through static analysis. As maintainability can be defined as the "speed and ease with which a program can be corrected or changed", we believe that test data are reflective of the changes performed during maintenance. Moreover, empirical observations allow to speculate about the relationships between maintainability and the behaviour of the software when executed by test cases (e.g., coverage values) and the test cases' characteristics (e.g., generation time). Our aim is to complement the state-of-the art by proposing a new approach for understanding and characterizing the maintainability of OO systems, which makes use of test data and of the information gathered from the tests' execution.},
 duplicado = {false},
 inserir = {false},
 title = {On the Evaluation of Software Maintainability Using Automatic Test Case Generation},
 year = {2014}
}

@article{1959,
 abstract = {Abstract:
Software testing is an important part of project development. Depending on system type and size, it is performed variously. Unit testing is one of the available approaches that is used to ensure that behavior of small software parts is consistent with requirements. It allows to improve software quality and decrease overall costs. Despite the fact that such an approach is commonly judged as a vital concept, it is not usual in control software. In this paper, the comprehensive approach to test the IEC 61131-3 software using unit tests is presented. It supports to create tests in two ways-either in textual and graphical IEC 61131-3 languages or in the CPTest+ dedicated test definition language. The latter is equipped with many advanced features, such as test fixtures and inclusions, parameterized and analog signal extensions, mock objects, as well as a few kinds of suites. The overall solution runs on the developer and testing station; hence, it does not have significant impact on performance of the control program and tests are more reliable and repeatable. To explain the concept, the simple running example is presented in this paper. The described solution has been introduced in the CPDev engineering environment for programming controllers.},
 duplicado = {false},
 inserir = {false},
 title = {POU-Oriented Unit Testing of IEC 61131-3 Control Software},
 year = {2015}
}

@article{1960,
 abstract = {Abstract:
Over the past 25 years the Brazilian Symposium on Software Engineering (SBES) has evolved to become the most important event on software engineering in Brazil. Throughout these years, SBES has gathered a large body of studies in software testing. Aimed at providing an insightful understanding of what has already been published in such event, we synthesized its rich 25-year history of research on software testing. Using information drawn from this overview we attempted to highlight which types of study have been the most applied for conveying software testing efforts. We also devised a co-authorship network to obtain a bird's-eye view of which research groups and scholars have been the most prolific ones. Moreover, by performing a citation analysis of the selected studies we set out to ascertain the importance of SBES in a wider scenario. Finally, borne out by the information extracted from the studies, we shed some light on the state-of-the-art of software testing in Brazil and provide an outlook on its foreseeable future.},
 duplicado = {false},
 inserir = {false},
 title = {What a Long, Strange Trip It's Been: Past, Present, and Future Perspectives on Software Testing Research},
 year = {2011}
}

@article{1961,
 abstract = {Abstract:
To facilitate the sharing and combination of knowledge by Global Software Engineering (GSE) researchers and practitioners, the need for a common terminology and knowledge classification scheme has been identified, and as a consequence, a taxonomy and an extension were proposed. In addition, one systematic literature review and a survey on respectively the state of the art and practice of effort estimation in GSE were conducted, showing that despite its importance in practice, the GSE effort estimation literature is rare and reported in an ad-hoc way. Therefore, this paper proposes a specialized GSE taxonomy for effort estimation, which was built on the recently proposed general GSE taxonomy (including the extension) and was also based on the findings from two empirical studies and expert knowledge. The specialized taxonomy was validated using data from eight finished GSE projects. Our effort estimation taxonomy for GSE can help both researchers and practitioners by supporting the reporting of new GSE effort estimation studies, i.e. new studies are to be easier to identify, compare, aggregate and synthesize. Further, it can also help practitioners by providing them with an initial set of factors that can be considered when estimating effort for GSE projects.},
 duplicado = {false},
 inserir = {false},
 title = {A Specialized Global Software Engineering Taxonomy for Effort Estimation},
 year = {2016}
}

@article{1962,
 abstract = {Abstract:
Context: In teaching about software engineering we currently make little use of any empirical knowledge. Aim: To examine the outcomes available from the use of Evidence-Based Software Engineering (EBSE) practices, so as to identify where these can provide support for, and inform, teaching activities. Method: We have examined all known secondary studies published up to the end of 2009, together with those published in major journals to mid-2011, and identified where these provide practical results that are relevant to student needs. Results: Starting with 145 candidate systematic literature reviews (SLRs), we were able to identify and classify potentially useful teaching material from 43 of them. Conclusions: EBSE can potentially lend authority to our teaching, although the coverage of key topics is uneven. Additionally, mapping studies can provide support for research-led teaching.},
 duplicado = {false},
 inserir = {false},
 title = {What scope is there for adopting evidence-informed teaching in SE?},
 year = {2012}
}

@article{1963,
 abstract = {Abstract:
Unit testing is the core fundamental to ensure code is in accordance with the design specifications. The coding and unit testing standard reflects the stability of project (not to mention the testing effort). Code stability is greatly influenced by the efforts of unit testing, which can be automated to reduce the human efforts. Inspite of several tools identified for unit testing, tools need to be able to identify the level dependencies or depth of program entity usage in software fragments. This factor greatly influences unit testing complexity. Higher the level of dependency, the greater the complexity of unit testing the code. This paper focuses on this factor which has been a trivial concern for developer over the years. This problem is neither limited nor restricted to a particular paradigm of programming language. Unit Testing becomes more effective when construct becomes more specific to be tested instead of checking the entire code being developed.},
 duplicado = {false},
 inserir = {false},
 title = {Level dependencies of individual entities in random unit testing of structured code},
 year = {2011}
}

@article{1964,
 abstract = {Abstract:
There is a gap between software testing research and practice. One reason is the discrepancy between how testing research is reported and how testing challenges are perceived in industry. We propose the SERP-test taxonomy to structure information on testing interventions and practical testing challenges from a common perspective and thus bridge the communication gap. To develop the taxonomy we follow a systematic incremental approach. The SERP-test taxonomy may be used by both researchers and practitioners to classify and search for testing challenges or interventions. The SERP-test taxonomy also supports comparison of testing interventions by providing an instrument for assessing the distance between them and thus identify relevant points of comparisons.},
 duplicado = {false},
 inserir = {false},
 title = {Mapping software testing practice with software testing research SERP-test taxonomy},
 year = {2015}
}

@article{1965,
 abstract = {Abstract

The transition from a classical to an agile software development procedure needs a structured and strategic roll out to realize the expected benefits of the transition phase. Quality assurance as part of the software development has also to be designed to realize its targets of the agile transition for adequate project and program quality assurance. Besides effectivity the economic aspects have to be implemented also in a value-driven agile product quality assurance. This tension between effectivity and economy will be shown on the example of the Volkswagen group IT. The transition is mapped to the SPI Manifesto to demonstrate the currency in 2009 of the established values and principles for software process improvement.},
 duplicado = {false},
 inserir = {false},
 title = {Effectivity and economical aspects for agile quality assurance in large enterprises},
 year = {2016}
}

@article{1966,
 abstract = {In Agile Software Development (ASD) effort estimation plays an important role during release and iteration planning. The state of the art and practice on effort estimation in ASD have been recently identified. However, this knowledge has not yet been organized. The aim of this study is twofold: (1) To organize the knowledge on effort estimation in ASD and (2) to use this organized knowledge to support practice and the future research on effort estimation in ASD. We applied a taxonomy design method to organize the identified knowledge as a taxonomy of effort estimation in ASD. The proposed taxonomy offers a faceted classification scheme to characterize estimation activities of agile projects. Our agile estimation taxonomy consists of four dimensions: estimation context, estimation technique, effort predictors and effort estimate. Each dimension in turn has several facets. We applied the taxonomy to characterize estimation activities of 10 agile projects identified from the literature to assess whether all important estimation-related aspects are reported. The results showed that studies do not report complete information related to estimation. The taxonomy was also used to characterize the estimation activities of four agile teams from three different software companies. The practitioners involved in the investigation found the taxonomy useful in characterizing and documenting the estimation sessions.},
 duplicado = {false},
 inserir = {false},
 title = {An Effort Estimation Taxonomy for Agile Software Development},
 year = {2017}
}

@article{1967,
 abstract = {Abstract
Context: Software Engineering (SE) is an evolving discipline with new subareas being continuously developed and added. To structure and better understand the SE body of knowledge, taxonomies have been proposed in all SE knowledge areas.

Objective: The objective of this paper is to characterize the state-of-the-art research on SE taxonomies.

Method: A systematic mapping study was conducted, based on 270 primary studies.

Results: An increasing number of SE taxonomies have been published since 2000 in a broad range of venues, including the top SE journals and conferences. The majority of taxonomies can be grouped into the following SWEBOK knowledge areas: construction (19.55%), design (19.55%), requirements (15.50%) and maintenance (11.81%). Illustration (45.76%) is the most frequently used approach for taxonomy validation. Hierarchy (53.14%) and faceted analysis (39.48%) are the most frequently used classification structures. Most taxonomies rely on qualitative procedures to classify subject matter instances, but in most cases (86.53%) these procedures are not described in sufficient detail. The majority of the taxonomies (97%) target unique subject matters and many taxonomy-papers are cited frequently. Most SE taxonomies are designed in an ad-hoc way. To address this issue, we have revised an existing method for developing taxonomies in a more systematic way.

Conclusion: There is a strong interest in taxonomies in SE, but few taxonomies are extended or revised. Taxonomy design decisions regarding the used classification structures, procedures and descriptive bases are usually not well described and motivated.},
 duplicado = {false},
 inserir = {false},
 title = {Taxonomies in software engineering: A Systematic mapping study and a revised taxonomy development method},
 year = {2017}
}

@article{1968,
 abstract = {Requirements Engineering and Software Testing are mature areas and have seen a lot of research. Nevertheless, their interactions have been sparsely explored beyond the concept of traceability. To fill this gap, we propose a definition of requirements engineering and software test (REST) alignment, a taxonomy that characterizes the methods linking the respective areas, and a process to assess alignment. The taxonomy can support researchers to identify new opportunities for investigation, as well as practitioners to compare alignment methods and evaluate alignment, or lack thereof. We constructed the REST taxonomy by analyzing alignment methods published in literature, iteratively validating the emerging dimensions. The resulting concept of an information dyad characterizes the exchange of information required for any alignment to take place. We demonstrate use of the taxonomy by applying it on five in-depth cases and illustrate angles of analysis on a set of thirteen alignment methods. In addition, we developed an assessment framework (REST-bench), applied it in an industrial assessment, and showed that it, with a low effort, can identify opportunities to improve REST alignment. Although we expect that the taxonomy can be further refined, we believe that the information dyad is a valid and useful construct to understand alignment.},
 duplicado = {false},
 inserir = {false},
 title = {A taxonomy for requirements engineering and software test alignment},
 year = {2014}
}

@article{1969,
 abstract = {Abstract

Background
In Global Software Engineering (GSE), the need for a common terminology and knowledge classification has been identified to facilitate the sharing and combination of knowledge by GSE researchers and practitioners. A GSE taxonomy was recently proposed to address such a need, focusing on a core set of dimensions; however its dimensions do not represent an exhaustive list of relevant GSE factors. Therefore, this study extends the existing taxonomy, incorporating new GSE dimensions that were identified by means of two empirical studies conducted recently.

Methods
To address the research questions of this study, we used evidence found through a systematic literature review and a survey. Based on literature, new dimensions were added to the existing taxonomy.

Results
We identified seven dimensions to extend and incorporate into the recently proposed GSE taxonomy. The resulting extended taxonomy was later on validated by comparing it with the existing taxonomy on which the extension is built and one additional taxonomy. We also demonstrated the utility of the extended taxonomy using it to classify eight finished real GSE projects. The extended taxonomy was representative enough to classify the projects in a clear way.

Conclusions
The extended taxonomy can help both researchers and practitioners by providing dimensions that can enable the description of different GSE contexts in a more comprehensive way; this can facilitate the understanding, comparison and aggregation of GSE-related findings.},
 duplicado = {false},
 inserir = {false},
 title = {An extended global software engineering taxonomy},
 year = {2016}
}

@article{1970,
 abstract = {In the last decade we have witnessed a growth in outsourcing and outshoring development. Following the promise of reducing costs and round-the-clock development, software organizations have grown from local to global enterprises. In the same decade, agile software development methodologies have emerged as a viable alternative to produce software. There is a myriad of agile processes and methodologies now available for any software development organization to choose from. These agile processes follow the values signed in the Agile Manifesto that preaches the exaltation of the individual programmer, high feedback, customer interaction and just enough planning and documentation. But how does global distribution affect these values? Can agile software development be implemented under the global software development context? This paper presents a systematic literature review aimed at identifying factors that affect the adoption of agile factors in global distributed teams. Our findings show that the literature is still in its initial case study publication stage. But most notably, we have found that only a few of the factors found are related to the agile values. Even though more research is clearly needed, this can be a signal that the factors affecting team distribution has more impact on software development than the values and practices preached by the agile processes.},
 duplicado = {false},
 inserir = {false},
 title = {FACTORS AFFECTING DISTRIBUTED AGILE PROJECTS: A SYSTEMATIC REVIEW},
 year = {2013}
}

@article{1971,
 abstract = {Abstract
This paper presents the construction and evaluation of SERP-test, a taxonomy aimed to improve communication between researchers and practitioners in the area of software testing. SERP-test can be utilized for direct communication in industry academia collaborations. It may also facilitate indirect communication between practitioners adopting software engineering research and researchers who are striving for industry relevance. SERP-test was constructed through a systematic and goal-oriented approach which included literature reviews and interviews with practitioners and researchers. SERP-test was evaluated through an online survey and by utilizing it in an industry-academia collaboration project. SERP-test comprises four facets along which both research contributions and practical challenges may be classified: Intervention, Scope, Effect target and Context constraints. This paper explains the available categories for each of these facets (i.e., their definitions and rationales) and presents examples of categorized entities. Several tasks may benefit from SERP-test, such as formulating research goals from a problem perspective, describing practical challenges in a researchable fashion, analyzing primary studies in a literature review, or identifying relevant points of comparison and generalization of research.},
 duplicado = {false},
 inserir = {false},
 title = {SERP-test: a taxonomy for supporting industry-academia communication},
 year = {2017}
}

@article{1972,
 abstract = {Abstract
Context-Aware Software Systems (CASS) use environmental information to provide better service to the systems� actors to fulfill their goals. Testing of ubiquitous software systems can be challenging since it is unlikely that, while designing the test cases, the tester can identify all possible context variations. A quasi-Systematic Literature Review has been undertaken to characterize the methods usually used for testing CASS. The analysis and generation of knowledge in this work rely on classifying the extracted information. Established taxonomies of software testing and context-aware were used to characterize and interpret the findings. The results show that, although it is possible to observe the utilization of some software testing methods, few empirical studies are evaluating such methods when testing CASS. The selected technical literature conveys a lack of consensus on the understanding of context and CASS, and on the meaning of software testing. Furthermore, context variation in CASS has only been partially addressed by the identified approaches. They either rely on simulating context or in fixing the values of context variables during testing. We argue that the tests of context-aware software systems need to deal with the diversity of context instead of mitigating their effects.},
 duplicado = {false},
 inserir = {false},
 title = {Characterizing testing methods for context-aware software systems: Results from a quasi-systematic literature review},
 year = {2017}
}

@article{1973,
 abstract = {Abstract
Despite the fact that the test phase is described in the literature as one of the most relevant for quality assurance in software projects, this test phase is not usually developed, among others, with enough resources, time or suitable techniques.

To offer solutions which supply the test phase, with appropriate tools for the automation of tests generation, or even, for their self-execution, could become a suitable way to improve this phase and reduce the cost constraints in real projects.

This paper focuses on answering a concrete research question: is it possible to generate test cases from functional requirements described in an informal way? For this aim, it presents an overview of a set of relevant approaches that works in this field and offers a set of comparative analysis to determine which the state of the art is.},
 duplicado = {false},
 inserir = {false},
 title = {An overview on test generation from functional requirements},
 year = {2011}
}

@article{1974,
 abstract = {Abstract
Over the past 25 years the Brazilian Symposium on Software Engineering (SBES) has evolved to become the most important event on software engineering in Brazil. Throughout these years, SBES has gathered a large body of studies in software testing. Aimed at providing an insightful understanding of what has already been published in such event, we have synthesized its 25-year history of research on software testing. Using information drawn from this overview we highlighted which software testing topics have been the most extensively surveyed in SBES literature. We have also devised a co-authorship network to depict the most prolific research groups and researchers. Moreover, by performing a citation analysis of the selected studies we have tried to ascertain the importance of SBES in a wider scenario. Finally, using the information extracted from the studies, we have shed light on the state-of-the-art of software testing in Brazil and provided an outlook on its foreseeable future.},
 duplicado = {false},
 inserir = {false},
 title = {A scoping study on the 25 years of research into software testing in Brazil and an outlook on the future of the area},
 year = {2013}
}

@article{1975,
 abstract = {Abstract:
Testing is a very essential activity for software development. It is the act of executing a software product in order to validate whether it behaves as intended and identify possible malfunctions. Studies have shown that testing makes up more than 50% of the development cost. Besides, much effort and emphasis have now been placed on tasks related to automation with the purpose of reducing cost and the participation of the human element in software testing activities. Testing is still a human-based activity. Therefore, efficient ways of testing software products for quality assurance will require a better and more comprehensive understanding of testers' feelings, perceptions and motivations, in this paper referred to as Tester Experience (TX). Thus, the better the tester's experience during the software testing process, the better the result. TX can be defined as a means of capturing how testers think and feel about their activities within the software testing environment, with the assumption that an improvement of the tester's experience has positive impact on quality assurance. This paper motivates the importance of TX, highlights related approaches from other domains, proposes a definition based on similar concepts in other domains, and proposes future research activities.},
 duplicado = {false},
 inserir = {false},
 title = {Tester Experience: Concept, Issues and Definition},
 year = {2017}
}

@article{1976,
 abstract = {Abstract:
This paper is introducing the research topic of proposal "Understanding socio-technical factors influencing testers in software development organizations", which using qualitatively and quantitatively analysis, is looking at elements affecting the testing activities in software development companies. The scope of the research is to improve our understanding of the challenges faced on daily basis in testing activities, and to propose improvements for the testing practice and for the image of testing and testers, while taking into consideration the socio-technical nature of testing activities. This study is a first stepping stone into research of the testing practices, testers' experience, and the outside world's perception of their work.},
 duplicado = {false},
 inserir = {false},
 title = {Understanding Socio-technical Factors Influencing Testers in Software Development Organizations},
 year = {2012}
}

@article{1977,
 abstract = {Abstract:
Most software testing research has focused on the development of systematic, standardised, and automated testing methodologies and tools. The abilities and expertise needed to apply such techniques and tools - such as personality traits, education, and experience - have attracted a comparatively small amount of research attention. However, the limited research in the area to date provides some indication that the human traits of software testers are important for effective testing. This paper presents the opinions of software testers themselves, collected through an online survey, on the importance of a variety of factors that influence effective testing, including testing-specific training, experience, skills, and human qualities like dedication and general intelligence. The survey responses strongly suggest that while testing tools and training are important, human factors were similarly considered highly important. Domain knowledge, experience, intelligence, and dedication, amongst other traits, were considered crucial for a software tester to be effective. As such, while systematic methodologies are important, the individual most clearly does matter in software testing. The results of our research have implications for education, recruitment, training and management of software testers.},
 duplicado = {false},
 inserir = {false},
 title = {A Preliminary Survey of Factors Affecting Software Testers},
 year = {2014}
}

@article{1978,
 abstract = {Abstract:
Exploratory Testing (ET) is a widely applied approach in practice. This approach relies on the knowledge and experience of test engineers and technicians who perform ET. Hence, we aimed at evaluating the impact of education and experience level on the effectiveness of ET. We conducted an industrial case study for this purpose. 19 practitioners, who have different educational backgrounds and experience levels, were involved in applying ET for testing a Digital TV system. We measured the number of detected failures and categorized these failures based on their severity. We evaluated effectiveness from two aspects: criticality of the detected failures and efficiency in terms of number of failures detected per unit of time. The results show that the efficiency of ET is significantly affected by both the educational background and experience. When it comes to the number of critical failures detected, we cannot observe any impact of education on results. However, experience level has a significant impact for this aspect as well.},
 duplicado = {false},
 inserir = {false},
 title = {Impact of Education and Experience Level on the Effectiveness of Exploratory Testing: An Industrial Case Study},
 year = {2017}
}

@article{1979,
 abstract = {Abstract:
Requirements-based testing has become a critical quality assurance technique designed to ensure a sufficiently high degree of product quality. However, the quality of the test cases depends on the quality of the requirements specification. In a preliminary experiment, we analyze potential links between the quality of the requirements and of the test cases.},
 duplicado = {false},
 inserir = {false},
 title = {Initial Investigations on the Influence of Requirement Smells on Test-Case Design},
 year = {2017}
}

@article{1980,
 abstract = {Abstract:
Software testing plays a major role in determining the quality of software products. Testing activities are influenced by the available methods and tools, but also by the non-technical aspects of the software development process. The scope of the study is to explore how testing activities are organized in Norwegian companies, and factors that influence the creation of a testing department, or encourage the investment in personnel dedicated to testing. The research was performed using a combination of qualitative and quantitative methods and started with an initial survey which comprised questions with multiple choices as well as open ended questions. The next stage included interviews and an additional round of open ended questions. Our study found four organizational categories in which testing activities can occur, combined with observations on the correlation between testing automation activities and testing team structure. We were interested in retrieving the factors that influence and determine a certain organization of the testers in software producing companies. This study provides a snapshot of the current trends of organizing software testing activities and it is a stepping stone into research of the testing practices and testers' experience.},
 duplicado = {false},
 inserir = {false},
 title = {Organization of Testing Activities in Norwegian Software Companies},
 year = {2013}
}

@article{1981,
 abstract = {Abstract:

We present a field study on how testers use knowledge while performing exploratory software testing (ET) in industrial settings. We video recorded 12 testing sessions in four industrial organizations, having our subjects think aloud while performing their usual functional testing work. Using applied grounded theory, we analyzed how the subjects performed tests and what type of knowledge they utilized. We discuss how testers recognize failures based on their personal knowledge without detailed test case descriptions. The knowledge is classified under the categories of domain knowledge, system knowledge, and general software engineering knowledge. We found that testers applied their knowledge either as a test oracle to determine whether a result was correct or not, or for test design, to guide them in selecting objects for test and designing tests. Interestingly, a large number of failures, windfall failures, were found outside the actual focus areas of testing as a result of exploratory investigation. We conclude that the way exploratory testers apply their knowledge for test design and failure recognition differs clearly from the test-case-based paradigm and is one of the explanatory factors of the effectiveness of the exploratory testing approach.},
 duplicado = {false},
 inserir = {false},
 title = {The Role of the Tester's Knowledge in Exploratory Software Testing},
 year = {2012}
}

@article{1982,
 abstract = {Abstract:
Testing is an important activity in engineering of industrial software. For such software, testing is usually performed manually by handcrafting test suites based on specific design techniques and domain-specific experience. To support developers in testing, different approaches for producing good test suites have been proposed. In the last couple of years combinatorial testing has been explored with the goal of automatically combining the input values of the software based on a certain strategy. Pairwise testing is a combinatorial technique used to generate test suites by varying the values of each pair of input parameters to a system until all possible combinations of those parameters are created. There is some evidence suggesting that these kinds of techniques are efficient and relatively good at detecting software faults. Unfortunately, there is little experimental evidence on the comparison of these combinatorial testing techniques with, what is perceived as, rigorous manually handcrafted testing. In this study we compare pairwise test suites with test suites created manually by engineers for 45 industrial programs. The test suites were evaluated in terms of fault detection, code coverage and number of tests. The results of this study show that pairwise testing, while useful for achieving high code coverage and fault detection for the majority of the programs, is almost as effective in terms of fault detection as manual testing. The results also suggest that pairwise testing is just as good as manual testing at fault detection for 64% of the programs.},
 duplicado = {false},
 inserir = {false},
 title = {Can Pairwise Testing Perform Comparably to Manually Handcrafted Testing Carried Out by Industrial Engineers?},
 year = {2017}
}

@article{1983,
 abstract = {Abstract:
The effectiveness of testing is a major determinant of software quality. It is believed that individual testers vary in their effectiveness, but so far the factors contributing to this variation have not been well studied. In this study, we examined whether personality traits, as described by the five-factor model, affect performance on a software testing task. ICT students were given a small software testing task at which their effectiveness was assessed using several different criteria, including bug location rate, weighted fault density, and bug report quality. Their personality was assessed using the NEO PI-3 personality questionnaire. We then compared testing performance according to individual and aggregate measures against different five-factor personality traits. Several weak correlations between two of these personality traits, extraversion and conscientiousness, and testing effectiveness were found.},
 duplicado = {false},
 inserir = {false},
 title = {An empirical study of the effects of personality on software testing},
 year = {2013}
}

@article{1984,
 abstract = {Abstract:
Security testing has become a critical quality assurance technique to provide a sufficient degree of security. However, it is regarded to be too complex to be performed by system testers, who are non-experts in security. This paper provides two approaches to testing security requirements, one based on a Failure Modes, Vulnerabilities and Effect Analysis (FMVEA) and the other based on misuse cases, both suitable for testers who have domain knowledge but are not security experts. We perform a controlled experiment to empirically compare the two testing approaches based on the quality of the derived test cases. The results of the experiment show that the use of attack patterns in the misuse-case-based approach delivers test cases with a better alignment between requirements and security test cases as well as a higher amount of correct test cases.},
 duplicado = {false},
 inserir = {false},
 title = {Testing Security Requirements with Non-experts: Approaches and Empirical Investigations},
 year = {2016}
}

@article{1985,
 abstract = {Abstract:
We present the results of a qualitative observation study on the manual testing practices in four software development companies. Manual testing practices are seldom studied, and based on the literature we conjecture that they have a strong effect on the effectiveness of manual testing. We observed testing sessions of 11 software professionals performing system level functional testing. As a result we identified 22 manual testing practices that we classified into 9 test session strategies and 13 detailed test execution techniques. Many of the identified techniques were based on similar ideas as traditional test case design techniques. However, the subjects applied these techniques during manual testing without separate test design phase. The results indicate that software professionals use a wide set of strategies and techniques when performing manual testing. Testers seem to need and use techniques even if applying exploratory testing.},
 duplicado = {false},
 inserir = {false},
 title = {How do testers do it? An exploratory study on manual testing practices},
 year = {2009}
}

@article{1986,
 abstract = {Abstract:
With the growth of the software testing industry, many in-house testing groups and outsourcing testing companies have been established. Underlying the success of these testing groups and companies are team(s) of testers. This research investigates the importance of different factors, diversity and experience on building a successful testing team. We collected the opinions of testing practitioners on these factors via a survey. The outcome strongly indicates the relative importance of different factors and that diversity is helpful for a testing team. The results also support the importance of suitable team experience.},
 duplicado = {false},
 inserir = {false},
 title = {A Preliminary Study on Factors Affecting Software Testing Team Performance},
 year = {2011}
}

@article{1987,
 abstract = {Abstract:
This paper is presenting the research topic proposal "Understanding the influence of social and technical factors in software organizations". This research combines qualitative and quantitative methods while exploring the elements impacting the testing activities. The study's scope is to improve our understanding of the challenges faced on daily basis by testers in their activities, the motivation behind a testing career and to propose improvements for the testing practice and testers' image, while taking into consideration the social and technical nature of testing activities.},
 duplicado = {false},
 inserir = {false},
 title = {Understanding the Influence of Social and Technical Factors Testers in Software Organizations},
 year = {2013}
}

@article{1988,
 abstract = {Abstract:
Model based testing (MBT) techniques have been used extensively to enable automatic and systematic test data generation. Despite many success stories, MBT still suffers from the lack of a broader practical adoption. This paper reports on two experiences of applying MBT for test data generation in industrial contexts. We give our view on some of the reasons affecting MBT practical adoption, discuss the perspectives for facilitating the adoption of MBT in industrial settings and summarize some of the barriers that remain to be surpassed. The goal of the paper is to provide a greater understanding of MBT in industry, potentially increasing its practical adoption.},
 duplicado = {false},
 inserir = {false},
 title = {A Review of Two Experiences from Applying Model Based Testing in Practice},
 year = {2012}
}

@article{1989,
 abstract = {Abstract:
Software development organizations invest in test automation tools and methods to optimize defect discovery rates. The true value of these tools is realized when the defects are addressed before release, and hence good quality defect reports are critical. We describe a survey we conducted to better understand usability defect reporting, in particular, influences on the quality of usability defect reports. We analyze feedback from nearly 150 software developers and usability defect reporters and identify key determinants of quality defect reports, aspects of usability defects that are challenging to report and directions for future research into usability defect reporting tools to improve usability defect reports quality.},
 duplicado = {false},
 inserir = {false},
 title = {What Influences Usability Defect Reporting? A Survey of Software Development Practitioners},
 year = {2016}
}

@article{1990,
 abstract = {Abstract:
Testing is one of the most labor-intensive activities in software development life cycle and consumes between 30% and 50% of total development costs according to many studies. The communication gap between testers and developers that is caused by unclear or even invalid defect reporting usually makes the testing schedule delay, and contributes large amount of testing effort to rework and re-communication. Defect reporting's efficiency directly influences testing efficiency and effectiveness. From our observation and improvement practices on a software product with recent 4 increments: 1) the percentage of unclear defect reports is around 23%, but more than 82% testers, more or less, reported unclear defect reports, 2) the percentage of invalid defect reports is around 26%, but more than 35% testers reported invalid defect reports. Improvement practices that we took on training testers on how to report defect in a clearer and more efficient way further bridged the communication gap between testers and developers, and it can reduce 15.7% unclear defect reports and 19.53% invalid defect reports, which finally led to the improvement of testing efficiency.},
 duplicado = {false},
 inserir = {false},
 title = {Is It Really a Defect? An Empirical Study on Measuring and Improving the Process of Software Defect Reporting},
 year = {2011}
}

@article{1991,
 abstract = {Abstract:
Users continue to stumble upon software bugs, despite developers' efforts to build and test high-quality software. Although traditional testing and quality assurance techniques are extremely valuable, software testing should pay more attention to exploration. Exploration can directly apply knowledge and learning to the core of industrial software testing, revealing more relevant bugs earlier. This article describes exploration's characteristics, knowledge's role in software testing, and the three levels of exploratory-testing practices. Academics and practitioners should focus on exploiting exploration's strengths in software testing and on reporting existing practices and benefits in different academic and industrial contexts.},
 duplicado = {false},
 inserir = {false},
 title = {Test Better by Exploring: Harnessing Human Skills and Knowledge},
 year = {2015}
}

@article{1992,
 abstract = {Abstract:
Software testing is the process of an execution based investigation of some aspects of the software's quality. The efficiency of the process depends on the methods and technologies used, but crucially also on the human testers. Software testers typically attempt to anticipate and expose ways software may be defective, a fundamentally different task set to those of other software development practitioners. This raises the question of whether the personality of software testers may be different to other people involved in software development. To test this hypothesis, we collected personality profiles using the big five factor model of around 200 software development practitioners. Analysis of this data indicates that software testers are significantly higher on the conscientiousness factor than other software development practitioners, while other factors remain broadly consistent.},
 duplicado = {false},
 inserir = {false},
 title = {An Empirical Investigation of Personality Traits of Software Testers},
 year = {2015}
}

@article{1993,
 abstract = {Abstract
Context

Prior research has focused heavily on explicit defect detection, such as formal testing and reviews. However, in reality, humans find software defects in various activities. Implicit defect detection activities, such as preparing a product demonstration or updating a user manual, are not designed for defect detection, yet through such activities defects are discovered. In addition, the type of documentation, and knowledge used, in defect detection is diverse.

Objective

To understand how defect detection is affected by the perspectives of responsibility, activity, knowledge, and document use. To provide illustrative numbers concerning the multidimensionality of defect detection in an industrial context.

Method

The data were collected with a survey on four software development organizations in three different companies. We designed the survey based on our prior extensive work with these companies.

Results

We found that among our subjects (n = 105), implicit defect detection made a higher contribution than explicit defect detection in terms of found defects, 62% vs. 38%. We show that defect detection was performed by subjects in various roles supporting the earlier reports of testing being a cross-cutting activity in software development organizations. We found a low use of test cases (18%), but a high use of other documents in software defect detection, and furthermore, we found that personal knowledge was applied as an oracle in defect detection much more often than documented oracles. Finally, we recognize that contextual factors largely affect the transferability of our results, and we provide elaborate discussion about the most important contextual factors. Furthermore, we must be cautious as the results were obtained with a survey, and come from a small number of organizations.

Conclusions

In this paper, we show the large impact of implicit defect detection activities in four case organizations. Implicit defect detection has a large contribution to defect detection in practice, and can be viewed as an extremely low-cost way of detecting defects. Thus, harnessing and supporting it better may increase quality without increasing costs. For example, if an employee can update the user manual, and simultaneously detect defects from the software, then the defect detection part of this activity can be seen as cost-free. Additionally, further research is needed on how diverse types of useful documentation and knowledge can be utilized in defect detection.},
 duplicado = {false},
 inserir = {false},
 title = {How are software defects found? The role of implicit defect detection, individual responsibility, documents, and knowledge},
 year = {2014}
}

@article{1994,
 abstract = {Abstract
The exploratory testing (ET) approach is commonly applied in industry, but lacks scientific research. The scientific community needs quantitative results on the performance of ET taken from realistic experimental settings. The objective of this paper is to quantify the effectiveness and efficiency of ET vs. testing with documented test cases (test case based testing, TCT). We performed four controlled experiments where a total of 24 practitioners and 46 students performed manual functional testing using ET and TCT. We measured the number of identified defects in the 90-minute testing sessions, the detection difficulty, severity and types of the detected defects, and the number of false defect reports. The results show that ET found a significantly greater number of defects. ET also found significantly more defects of varying levels of difficulty, types and severity levels. However, the two testing approaches did not differ significantly in terms of the number of false defect reports submitted. We conclude that ET was more efficient than TCT in our experiment. ET was also more effective than TCT when detection difficulty, type of defects and severity levels are considered. The two approaches are comparable when it comes to the number of false defect reports submitted.},
 duplicado = {false},
 inserir = {false},
 title = {An experiment on the effectiveness and efficiency of exploratory testing},
 year = {2015}
}

